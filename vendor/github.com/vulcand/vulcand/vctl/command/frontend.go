package command

import (
	"github.com/codegangsta/cli"
	"github.com/vulcand/route"
	"github.com/vulcand/vulcand/engine"
)

func NewFrontendCommand(cmd *Command) cli.Command {
	return cli.Command{
		Name:  "frontend",
		Usage: "Operations with vulcan frontends",
		Subcommands: []cli.Command{
			{
				Name:   "ls",
				Usage:  "List all frontends",
				Flags:  []cli.Flag{},
				Action: cmd.printFrontendsAction,
			},
			{
				Name:  "show",
				Usage: "Show frontend details",
				Flags: []cli.Flag{
					cli.StringFlag{Name: "id", Usage: "id"},
				},
				Action: cmd.printFrontendAction,
			},
			{
				Name:  "upsert",
				Usage: "Update or insert a frontend",
				Flags: append([]cli.Flag{
					cli.StringFlag{Name: "id", Usage: "id, autogenerated if empty"},
					cli.StringFlag{Name: "route", Usage: "roue, will be matched against request's path"},
					cli.DurationFlag{Name: "ttl", Usage: "time to live duration, persistent if omitted"},
					cli.StringFlag{Name: "backend, b", Usage: "backend id"},
				}, frontendOptions()...),
				Action: cmd.upsertFrontendAction,
			},
			{
				Name:   "rm",
				Usage:  "Remove a frontend",
				Action: cmd.deleteFrontendAction,
				Flags: []cli.Flag{
					cli.StringFlag{Name: "id", Usage: "id"},
				},
			},
		},
	}
}

func (cmd *Command) printFrontendsAction(c *cli.Context) error {
	fs, err := cmd.client.GetFrontends()
	if err != nil {
		return err
	}
	cmd.printFrontends(fs)
	return nil
}

func (cmd *Command) printFrontendAction(c *cli.Context) error {
	fk := engine.FrontendKey{Id: c.String("id")}
	frontend, err := cmd.client.GetFrontend(fk)
	if err != nil {
		return err
	}

	ms, err := cmd.client.GetMiddlewares(fk)
	if err != nil {
		return err
	}
	cmd.printFrontend(frontend, ms)
	return nil
}

func (cmd *Command) upsertFrontendAction(c *cli.Context) error {
	settings, err := getFrontendSettings(c)
	if err != nil {
		return err
	}
	f, err := engine.NewHTTPFrontend(route.NewMux(), c.String("id"), c.String("b"), c.String("route"), settings)
	if err != nil {
		return err
	}
	if err := cmd.client.UpsertFrontend(*f, c.Duration("ttl")); err != nil {
		return err
	}
	cmd.printOk("frontend upserted")
	return nil
}

func (cmd *Command) deleteFrontendAction(c *cli.Context) error {
	err := cmd.client.DeleteFrontend(engine.FrontendKey{Id: c.String("id")})
	if err != nil {
		return err
	}
	cmd.printOk("frontend deleted")
	return nil
}

func getFrontendSettings(c *cli.Context) (engine.HTTPFrontendSettings, error) {
	s := engine.HTTPFrontendSettings{}

	s.Limits.MaxMemBodyBytes = int64(c.Int("maxMemBodyKB") * 1024)
	s.Limits.MaxBodyBytes = int64(c.Int("maxBodyKB") * 1024)

	s.FailoverPredicate = c.String("failoverPredicate")
	s.Hostname = c.String("forwardHost")
	s.TrustForwardHeader = c.Bool("trustForwardHeader")
	s.PassHostHeader = c.Bool("passHostHeader")

	return s, nil
}

func frontendOptions() []cli.Flag {
	return []cli.Flag{
		// Frontend limits
		cli.IntFlag{Name: "maxMemBodyKB", Usage: "maximum request size to cache in memory, in KB"},
		cli.IntFlag{Name: "maxBodyKB", Usage: "maximum request size to allow for a frontend, in KB"},

		// Misc options
		cli.StringFlag{Name: "failoverPredicate", Usage: "predicate that defines cases when failover is allowed"},
		cli.StringFlag{Name: "forwardHost", Usage: "hostname to set when forwarding a request"},
		cli.BoolFlag{Name: "trustForwardHeader", Usage: "allows copying X-Forwarded-For header value from the original request"},
		cli.BoolFlag{Name: "passHostHeader", Usage: "allows passing custom headers to the backend servers"},
	}
}
